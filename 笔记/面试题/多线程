2.线程的状态
创建(New)状态 
就绪(Runnable)状态
运行(Running)状态
阻塞(Blocked)状态
死亡(Terminated)状态
3.实现多线程有以下四种方式：
1. 继承Thread类

2.实现Runnable接口

3.实现Callable接口 ,
实现 Callable 接口。 相较于实现 Runnable 接口的方式，方法可以有返回值，并且可以抛出异常。执行 Callable 方式，需要 FutureTask 实现类的支持，用于接收运算结果。  FutureTask 是  Future 接口的实现类

4.线程池：提供了一个线程队列，队列中保存着所有等待状态的线程。避免了创建与销毁额外开销，提高了响应的速度。
用于解决多线程安全问题的方式：
  synchronized:隐式锁
  1. 同步代码块
  
  2. 同步方法
  
  jdk 1.5 后：
 3. 同步锁 Lock
sleep和wait的区别
类：sleep是Object类方法  ，wait是Thread类的方法
锁：sleep不释放锁，wait释放锁
使用范围：wait和notify，notifyAll只能在同步代码或同步代码块中使用，而wait可以使用于任何地方
唤醒方式：调用sleep的线程通常是睡眠一段时间，自动醒来，调用wait方法的，必须使用notify或者notifyAll方法唤醒

synchronized的底层实现原理
synchronzied可以保证方法和代码块在运行时，同一时刻只有一个方法可以进入临界区，同时它还能保证共享变量的内存可见性。
java中每一个对象都可以作为锁，这是synchronized实现同步的基础：

·普通同步方法，锁是当前实例对象
·静态同步方法，锁是当前类的class对象
·同步方法块，锁是括号里面的对象

synchronized 和 volatile 的区别是什么
1、volatile本质是告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从内存中读取；synchronize则是锁定当前变量，只有当前线程可以访问该变量，其他线程阻塞
2、volatile仅能使用在变量级别，synchronize则可以使用在变量，方法和类级别的
3、volatile仅能实现变量的修改可见性，但是不能保证原子性，而synchronize则可以保证变量的修改可见性和原子性
4.volatile不会造成线程阻塞，而synchronize可能会造成线程阻塞
5、volatile标记的变量不会被编译器优化，synchronize标记的变量可以被编译器优化
synchronized 和 Lock 有什么区别？
1、synchronzied是java内置关键字，在jvm层面，Lock是个java类
2、synchronzied无法判断是否获取锁的状态，Lock可以判断是否获取到锁
3、synchronize会自动释放锁，（线程执行完同步代码会释放，或者在执行过程中发生异常也会释放锁），Lock需要在finally中手动释放锁（Lock.unlock()方法释放锁），否则容易造成线程死锁
4、用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了
5、synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）
6、Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。


Java并发类库提供的线程池有哪几种？ 分别有什么特点？
利用Executors提供的通用线程池创建方法
newFixedThreadPool() : 创建固定大小的线程池
newCachedThreadPool() : 缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。
newSingleThreadExecutor() : 创建单个线程池。线程池中只有一个线程
newScheduledThreadPool() : 创建固定大小的线程，可以延迟或定时的执行任务。
newSecheduledThreadPool(int corePoolSize) 可以延迟或定时的执行任务 ,多个工作线程
  线程池都有哪些状态？
RUNNING：这是最正常的状态，接受新的任务，处理等待队列中的任务。
SHUTDOWN：不接受新的任务提交，但是会继续处理等待队列中的任务。
STOP：不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程。
TIDYING：所有的任务都销毁了，workCount 为 0，线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()。
TERMINATED：terminated()方法结束后，线程池的状态就会变成这个。

  线程池中 submit() 和 execute() 方法有什么区别？
execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；

submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功，并且可以通过 Future 的 get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用 get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。

execute()：只能执行 Runnable 类型的任务。
submit()：可以执行 Runnable 和 Callable 类型的任务。
Callable 类型的任务可以获取执行的返回值，而 Runnable 执行无返回值。

什么是死锁？
当线程 A 持有独占锁a，并尝试去获取独占锁 b 的同时，线程 B 持有独占锁 b，并尝试获取独占锁 a 的情况下，就会发生 AB 两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。

49.  怎么防止死锁？
1.尽量使用 tryLock(long timeout, TimeUnit unit)的方法(ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁。
2.尽量使用 Java. util. concurrent 并发类代替自己手写锁。
3.尽量降低锁的使用粒度，尽量不要几个功能用同一把锁。
4.尽量减少同步的代码块。
